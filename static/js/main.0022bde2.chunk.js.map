{"version":3,"sources":["components/Microphone/Microphone.js","components/TextArea.js","components/Voice.js","App.js","serviceWorker.js","index.js"],"names":["Microphone","speech","checked","setChecked","type","id","onChange","htmlFor","className","onClick","width","height","viewBox","cx","cy","r","TextArea","transcript","Voice","useSpeechRecognition","resetTranscript","useState","SpeechRecognition","browserSupportsSpeechRecognition","startListening","continuous","language","interimResults","stopListening","swal","SpeechSynthesisUtterance","text","volume","rate","pitch","window","speechSynthesis","speak","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAIe,SAASA,EAAT,GAAsD,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WACrD,OACC,oCACC,2BACCC,KAAK,WACLC,GAAG,UACHH,QAASA,EACTI,SAAU,kBAAMH,GAAYD,MAC7B,2BAAOK,QAAQ,UAAUC,UAAU,iBAClC,0BAAMA,UAAU,aAAaC,QAASR,GACrC,uBAAGO,UAAU,uBAEd,yBACCE,MAAM,QACNC,OAAO,QACPC,QAAQ,cACRJ,UAAU,WACV,4BAAQA,UAAU,SAASK,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC7C,4BAAQP,UAAU,SAASK,GAAG,KAAKC,GAAG,KAAKC,EAAE,QAE9C,yBAAKP,UAAU,cACd,uBAAGA,UAAU,kBACb,uBAAGA,UAAU,kBACb,uBAAGA,UAAU,qBCzBH,SAASQ,EAAT,GAAmC,IAAfC,EAAc,EAAdA,WAClC,OAAO,2BAAIA,GCMG,SAASC,IAAS,IAAD,EACSC,iCAAhCF,EADuB,EACvBA,WAAYG,EADW,EACXA,gBADW,EAEDC,oBAAS,GAFR,mBAExBnB,EAFwB,KAEfC,EAFe,KAI/B,IAAKmB,IAAkBC,mCACtB,OAAO,KA0BR,OACC,yBAAKf,UAAU,aACd,yBAAKA,UAAU,mBACd,wDAED,kBAAC,EAAD,CACCP,OA7BkB,WACpBqB,IAAkBE,eAAe,CAChCC,YAAY,EACZC,SAAU,QACVC,gBAAgB,KA0BfzB,QAASA,EACTC,WAAYA,IAEb,kBAACa,EAAD,CAAUC,WAAYA,IACtB,yBAAKT,UAAU,UACd,0BAAMC,QA3BI,WACZa,IAAkBM,gBAClBzB,GAAW,GACX0B,IAAK,SAAU,6BAA2B,aAyBvC,uBAAGrB,UAAU,wBAEd,0BAAMC,QAxBQ,WAChB,IAAMR,EAAS,IAAI6B,yBACnB7B,EAAO8B,KAAOd,EACdhB,EAAO+B,OAAS,EAChB/B,EAAOgC,KAAO,GACdhC,EAAOiC,MAAQ,EACfC,OAAOC,gBAAgBC,MAAMpC,KAmB1B,uBAAGO,UAAU,wBAEd,0BAAMC,QAASW,GACd,uBAAGZ,UAAU,qBCvDH,SAAS8B,IACvB,OAAO,kBAACpB,EAAD,MCOYqB,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0022bde2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './Microphone.css'\r\n\r\nexport default function Microphone({ speech, checked, setChecked }) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<input\r\n\t\t\t\ttype='checkbox'\r\n\t\t\t\tid='speaker'\r\n\t\t\t\tchecked={checked}\r\n\t\t\t\tonChange={() => setChecked(!checked)}></input>\r\n\t\t\t<label htmlFor='speaker' className='mic-container'>\r\n\t\t\t\t<span className='microphone' onClick={speech}>\r\n\t\t\t\t\t<i className='fas fa-microphone'></i>\r\n\t\t\t\t</span>\r\n\t\t\t\t<svg\r\n\t\t\t\t\twidth='120px'\r\n\t\t\t\t\theight='120px'\r\n\t\t\t\t\tviewBox='0 0 100 100'\r\n\t\t\t\t\tclassName='charger'>\r\n\t\t\t\t\t<circle className='circle' cx='50' cy='50' r='46' />\r\n\t\t\t\t\t<circle className='loader' cx='50' cy='50' r='46' />\r\n\t\t\t\t</svg>\r\n\t\t\t\t<div className='dotWrapper'>\r\n\t\t\t\t\t<i className='fas fa-circle'></i>\r\n\t\t\t\t\t<i className='fas fa-circle'></i>\r\n\t\t\t\t\t<i className='fas fa-circle'></i>\r\n\t\t\t\t</div>\r\n\t\t\t</label>\r\n\t\t</>\r\n\t)\r\n}\r\n","import React from 'react'\r\n\r\nexport default function TextArea({ transcript }) {\r\n\treturn <p>{transcript}</p>\r\n}\r\n","import React, { useState } from 'react'\r\nimport SpeechRecognition, {\r\n\tuseSpeechRecognition,\r\n} from 'react-speech-recognition'\r\nimport swal from 'sweetalert'\r\n\r\nimport Microphone from './Microphone/Microphone'\r\nimport TextArea from './TextArea'\r\n\r\nexport default function Voice() {\r\n\tconst { transcript, resetTranscript } = useSpeechRecognition()\r\n\tconst [checked, setChecked] = useState(false)\r\n\r\n\tif (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n\t\treturn null\r\n\t}\r\n\r\n\tconst SpeechToText = () => {\r\n\t\tSpeechRecognition.startListening({\r\n\t\t\tcontinuous: true,\r\n\t\t\tlanguage: 'es-CO',\r\n\t\t\tinterimResults: false,\r\n\t\t})\r\n\t}\r\n\r\n\tconst Stop = () => {\r\n\t\tSpeechRecognition.stopListening()\r\n\t\tsetChecked(false)\r\n\t\tswal('Listo!', 'Detuviste la grabaciÃ³n!', 'success')\r\n\t}\r\n\r\n\tconst ReadText = () => {\r\n\t\tconst speech = new SpeechSynthesisUtterance()\r\n\t\tspeech.text = transcript\r\n\t\tspeech.volume = 1\r\n\t\tspeech.rate = 0.8\r\n\t\tspeech.pitch = 1\r\n\t\twindow.speechSynthesis.speak(speech)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='container'>\r\n\t\t\t<div className='container-title'>\r\n\t\t\t\t<h2>Vamos! Hazme un dictado</h2>\r\n\t\t\t</div>\r\n\t\t\t<Microphone\r\n\t\t\t\tspeech={SpeechToText}\r\n\t\t\t\tchecked={checked}\r\n\t\t\t\tsetChecked={setChecked}\r\n\t\t\t/>\r\n\t\t\t<TextArea transcript={transcript} />\r\n\t\t\t<div className='navbar'>\r\n\t\t\t\t<span onClick={Stop}>\r\n\t\t\t\t\t<i className='far fa-stop-circle'></i>\r\n\t\t\t\t</span>\r\n\t\t\t\t<span onClick={ReadText}>\r\n\t\t\t\t\t<i className='far fa-play-circle'></i>\r\n\t\t\t\t</span>\r\n\t\t\t\t<span onClick={resetTranscript}>\r\n\t\t\t\t\t<i className='fas fa-eraser'></i>\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Voice from './components/Voice'\r\n\r\nexport default function App() {\r\n\treturn <Voice />\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}